paper,role,testing activities,test level,testing strategies,tool availability,tool type,mutation tool,mutation operator,equivalent mutant detection,cost reduction techniques,language,subject size,subject availability,mutant analysis
AbouTrab et al.\cite{aboutrab2013testing},A,test strategy evaluation,n/a,spec.,N,hand.,,well,n/a,n/a,C,n/a,N,
Aichernig et al.\cite{aichernig2011efficient},G,test data generation,int.,spec. (E),Y,exi.,$\mu$java,not suff.,n/a,n/a,java,n/a,N,
Aichernig et al.\cite{aichernig2015killing},G,test data generation,n/a,spec. (E),Y,exi.,$\mu$java,well,manual invest.,n/a,UML,S,N,
Ali et al.\cite{ali2007state},A,test strategy evaluation,int.,spec.,N,n/a,,well,n/a,n/a,java,P,Y,
Andrews et al.\cite{andrews2003general} , A , test oracle,unit,spec.,N,self.,Self-written,well, n/a , mutant sample, C ,"P, S",N,
Andrews et al.\cite{andrews2006using} , A , test strategy evaluation ,n/a,struc. ,N,exi. , \cite{andrews2003general} ,well,  not killed as equivalent , mutant sample, C ,S,Y,*
Androutsopoulos et al.\cite{androutsopoulos2014analysis},A,test strategy evaluation,n/a,others,Y,exi.,SMT-C,well,n/a,"fixed number, weak mutation",C,"S, M",N,
Antoniol et al.\cite{antoniol2002case},A,test strategy evaluation,n/a,spec.,N,n/a,,well,n/a,n/a,C++,S,N,*
Arcaini et al.\cite{arcaini2015using},A,model review,n/a,others,N,n/a,,well,model checker,n/a,spec.,n/a,Y,*
Arcuri and Briand\cite{arcuri2011adaptive},A,test strategy evaluation,n/a,spec.,Y,exi.,MuJava,well,  not killed as equivalent ,mutant sample,java,"P, S",N,
Asoudeh and Labiche\cite{asoudeh2014multi},A,test data generation,n/a,spec. (E),Y,exi.,MAJOR,well,n/a,n/a,java,n/a,N,
Au{\ss}erlechner et al.\cite{ausserlechner2013right},A,fault localisation,other,others,N,n/a,,well,n/a,n/a,spread-sheet,n/a,Y,
Baker and Habli\cite{baker2013empirical},A,test strategy evaluation,n/a,struc. ,"Y, N","exi., hand.",MILU,well,manual invest.,n/a,"C, Ada",P,N,*
Bandyopadhyay and Ghosh\cite{bandyopadhyay2009test},A,test data generation,unit,spec.,Y,exi.,MuJava,well,n/a,n/a,java,S,N,*
Bardin et al.\cite{bardin2015sound},G,test data generation,unit,hybrid ,Y,exi.,MuJava,well,n/a,weak mutation,java,"P, S",Y,
Baudry et al.\cite{baudry2000building},G,"test data generation, test strategy evaluation",unit,struc. (E),N,exi. ,$\mu$Slayer,well,manual invest.,n/a,Eiffel,n/a,Y,
Baudry et al.\cite{baudry2002genes},G,test data generation,sys.,spec. (E),N,self.,,well,manual invest.,n/a,C\#,n/a,N,
Baudry et al.\cite{baudry2005genetic},G,test data generation,"unit, sys.",struc. (E),N,n/a,,well,reduce likelihood,n/a,"Eiffel, C\#",n/a,N,
Belli and Beyaz{\i}t\cite{belli2015exploiting},G,test data generation,other,spec. (E),N,n/a,,well,reduce likelihood,fixed number,n/a,n/a,N,
Belli et al.\cite{belli2011mutation},A,"test data generation, test strategy evaluation",n/a,spec.,N,n/a,,well,deterministic model,n/a,spec.,n/a,N,*
Bertolino et al.\cite{bertolino2012automatic},A,"test data generation, test strategy evaluation",n/a,spec.,N,exi. ,\cite{martin2007fault},well,n/a,n/a,XACML,n/a,N,
Briand et al.\cite{briand2004assessing},A,test strategy evaluation,unit,spec.,N,n/a,,well, manual invest. ,n/a,"java, c++",S,Y,
Briand et al.\cite{briand2004using} , A , test strategy evaluation ,n/a,spec.,N,n/a,,n/a,  not killed as equivalent , n/a," Java, C++ ",n/a,N,
Briand et al.\cite{briand2005improving},A,test strategy evaluation,n/a,hybrid ,N,n/a,,well,n/a,n/a,java,S,Y,
Cai et al.and Lyu\cite{cai2005effect},A,test strategy evaluation,n/a,struc. ,N,n/a,,n/a,n/a,n/a,C,S,N,
Chae et al.\cite{chae2011automated},A,"test data generation, test-suite reduction",other,struc. ,N,n/a,,well,n/a,n/a,C,M,N,
Chen et al.\cite{chen2002can} ,G, test strategy evaluation ,n/a,struc. (E),Y,exi., Proteum ,n/a,no invest., n/a, C ,S,Y,
Cheon\cite{cheon2007abstraction},A, test oracle,unit,spec.,N,hand.,manual,not suff.,manual invest.,fixed number,java,P,N,
Chevalley and Th{\'e}venod-Fosse\cite{chevalley2001empirical},A,test data generation,n/a,spec.,N,self.,Self-written,well, manual invest. ,n/a,java,S,N,
Czemerinski et al.\cite{czemerinski2013behaviour},A,test strategy evaluation,unit,spec.,Y,exi.,MuJava,well,no invest.,mutant sample,java,"P, S",Y,
Czemerinski et al.\cite{czemerinski2015behaviour} , A , test strategy evaluation , unit ,spec.,Y,exi., $\mu$-JAVA ,well,  not killed as equivalent , n/a, Java ,"P, S",Y,*
Delamare et al.\cite{delamare2011approach},A, test oracle,unit,struc. ,Y,exi.,AjMutator,well,manual invest.,n/a,AspectJ,S,N,
DeMilli and Offutt\cite{demilli1991constraint} ,G, test data generation , unit ,struc. (E),Y,exi., Mothra,n/a, manual invest. , weak mutation, Fortran ,P,N,
DeMillo and Offutt\cite{demillo1993experimental},G,test data generation,unit,struc. (E),Y,exi.,Mothra,n/a,manual invest.,weak mutation,Fortran,n/a,N,
Denaro et al.\cite{denaro2015dynamic} , A , test data generation ,int.,struc. ,Y,exi., PIT ,n/a, n/a , n/a, Java ,"P, S",Y,*
Di Nardo et al.\cite{di2015generating},G,test data generation,sys.,spec. (E),N,n/a,,well,n/a,selection strategy,spec.,n/a,N,
Do and Rothermel\cite{do2005controlled},A,test case prioritisation,unit,struc. ,N,self.,Self-written,well,n/a,n/a,Java,n/a,Y,
Do and Rothermel\cite{do2006use},A,test case prioritisation,"unit, sys.","struc., spec.",N,self.,Self-written,well,n/a,n/a,Java,n/a,Y,
Do et al.\cite{do2008empirical},A,test case prioritisation,n/a,"struc., struc. (E)",N,self.,Self-written,well,n/a,fixed number,java,"S, M",Y,
Duran and Ntafos\cite{duran1984evaluation},A,test strategy evaluation,n/a,hybrid ,N,n/a,,n/a,n/a,n/a,Fortran,n/a,N,
Edwards and Shams\cite{edwards2014comparing},A,test strategy evaluation,unit,struc. ,Y,exi.,Javalanche,n/a,  not killed as equivalent ,n/a,java,n/a,N,
Edwards\cite{edwards2000black},A,test strategy evaluation,n/a,spec.,N,n/a,,well,manual invest.,n/a,spec.,"P, S",N,
Elbaum et al.\cite{elbaum2002test},G,test case prioritisation,n/a,struc. (E),Y,exi.,Proteum,n/a,n/a,n/a,C,"S,M",Y,
Fang et al.\cite{fang2014similarity} , A , test case prioritisation , unit ,sim. ,Y,exi., Jumble ,n/a,  not killed as equivalent , n/a, Java ,"S, M",Y,*
Fraser and Walkinshaw\cite{fraser2015assessing},G,"test data generation, test strategy evaluation",unit,struc. (E),Y,"exi., part.","Javalanche, EvoSuite",well,n/a,n/a,java,"P, S",N,
Fraser and Zeller\cite{fraser2012mutation} ,G," test data generation, test oracle, test-case minimisation ", unit ,struc. (E),Y,exi.,"$\mu$TEST, Javalanche",not suff.,no invest., weak mutation, Java ,n/a,Y,
Fraser et al.\cite{fraser2013does},G,test data generation,unit,struc. ,Y,exi.,MAJOR,n/a,n/a,fixed number,java,"P, S",Y,
Fraser et al.\cite{fraser2015achieving},G,test data generation,unit,struc. (E),Y,part.,EvoSuite,well,no invest.,"mutant sample, weak mutation",Java,n/a,Y,
Gay et al.\cite{gay2015automated},G,test oracle,unit,struc. (E),N,n/a,,well,model checker,fixed number,simulink,n/a,N,
Gay et al.\cite{gay2015risks} , A ," test data generation, test suite reduction",unit,"struc., struc. (E)",N,exi. , \cite{rajan2008requirements} ,not suff.,model checker,"fixed number, weak mutation", Lustre ,"P, S",N,
Gligoric et al.\cite{gligoric2013comparing} , A , test strategy evaluation ,n/a,struc. ,N,"exi., exi. "," Javalanche, \cite{andrews2003general} ",not suff.,no invest.,n/a," Java, C ","S, M",Y,
Gonzalez-Sanchez et al.\cite{gonzalez2011prioritizing},A,fault localisation,n/a,"struc., struc. (E)",Y,part.,Zoltar,n/a,n/a,n/a,C,"S, M",Y,
Gopinath et al.\cite{gopinath2014code} , A , test strategy evaluation ,unit,struc. ,Y,exi., PIT ,n/a, n/a , n/a, Java ,"P, S, M",Y,
Gupta and Jalote\cite{gupta2007test},A,"fault localisation, program repairing",unit,others,N,hand.,manual,well,n/a,n/a,java,S,N,
Hao et al.\cite{hao2012demand},G,test-suite reduction,n/a,struc. (E),Y,exi.,"Proteum, MuJava",n/a,n/a,mutant sample,"java, c","P, S",Y,
Hao et al.\cite{hao2014unified} , A , test case prioritisation ," unit, sys.",struc. ,Y,exi.," \cite{andrews2003general}, Mujava, Javalance ",n/a, n/a ,fixed number," Java, C ","S, M",Y,
Harman et al.\cite{harman2011strong} ,G, test data generation ,n/a,struc. (E),Y,exi., MiLu ,not suff.,  not killed as equivalent ,higher-order, C ,S,N,
Hennessy and Power\cite{hennessy2008analysing} , A , test-suite reduction ,other,others,N,self.,Self-written,well, n/a ,weak mutation,C++ Grammar ,"S, M",Y,
Hofer and Wotawa\cite{hofer2014does},A,fault localisation,other,others,N,n/a,,well,n/a,n/a,spread-sheet,n/a,Y,
Hofer et al.\cite{hofer2015empirical},A,fault localisation,other,others,N,n/a,,not suff.,n/a,n/a,spread-sheet,n/a,Y,
Holt et al.\cite{holt2012state},A,test strategy evaluation,n/a,spec.,N,hand.,Hand-seeded,well,n/a,n/a,C++,S,N,
Hong et al.\cite{hong2013impact} , A , test strategy evaluation ,n/a ,struc. ,N, n/a ,,well, n/a ,n/a, Java ,"P, S",N,
Hong et al.\cite{hong2015concurrency},A,test strategy evaluation,n/a,struc. ,N,n/a,,well,n/a,n/a,java,"P, S",N,
Hou et al.\cite{hou2007applying},G,test strategy evaluation,int.,spec. (E),N,n/a,,well,n/a,weak mutation,Java,"P, S",Y,
Inozemtseva et al.\cite{inozemtseva2014coverage} , A , test strategy evaluation , unit ,struc. ,Y,exi., PIT ,n/a,  not killed as equivalent , n/a, Java ,M,Y,
Jamrozik et al.\cite{jamrozik2012augmented},G,test data generation,unit,struc. (E),N,n/a,,n/a,n/a,n/a,C\#,n/a,N,
Jee et al.\cite{jee2014automated},A,test data generation,unit,struc. ,N,n/a,,well,n/a,n/a,PLC,n/a,N,
Jolly et al.\cite{jolly2012automated} , A , test strategy evaluation , unit ,spec.,N,exi. , Mutant Power ,n/a, n/a ,fixed number, C\# ,M,N,
Kanewala and Bieman\cite{kanewala2013using},A,test oracle,unit,others,Y,exi.,$\mu$java,well,n/a,n/a,java,P,N,
Kapfhammer et al.\cite{kapfhammer2013search},A,test data generation,other,others,N,n/a,,well,n/a,n/a,SQL ,n/a,N,
Khalil and Labiche\cite{khalil2010round},A,test strategy evaluation,n/a,spec.,Y,exi.,MuJava,well,  not killed as equivalent ,n/a,java,S,Y,
Kim et al.\cite{kim2001investigating} , A , test strategy evaluation ,n/a,"spec., struc. ",N,self.,Self-written,not suff., n/a , n/a, Java ,"P, S",N,*
Koster and Kao\cite{koster2007state},A,test strategy evaluation,unit,struc. (E),Y,exi.,MuJava,well,n/a,n/a,java,S,Y,
Kracht et al.\cite{kracht2014empirically} , A , test data generation , unit ,struc. ,Y,exi., MAJOR ,well, n/a ,n/a, Java ,"S, M",Y,
Kwon et al.\cite{kwon2014test} ,G, test case prioritisation , unit ,struc. (E),Y,exi., MAJOR ,not suff., n/a ,fixed number, Java ,S,Y,
Le Traon et al.\cite{le2006design},A,test strategy evaluation,unit,spec.,N,exi. ,$\mu$Slayer,well,manual invest.,n/a,Eiffel,n/a,Y,
Le Traon et al.\cite{le2007testing},A,"test strategy evaluation, test-suite selection",sys.,spec.,N,n/a,,well,reduce likelihood,n/a,spec.,M,N,
Lee and Offutt\cite{lee2001generating},G,test data generation,int.,struc. (E),N,n/a,,well,n/a,n/a,XML,n/a,Y,
Lei and Andrews\cite{lei2005minimization},A,test case minimisation,unit,struc. ,N,n/a,,well,  not killed as equivalent ,n/a,C,"P, S",N,
Li et al.\cite{li2007practical},A,test strategy evaluation,"int., sys.",spec.,N,n/a,,well,manual invest.,n/a,java,S,N,
Liu et al.\cite{liu2006approach} ,G, test data generation , unit ,struc. (E),N,self.,Self-written,well, manual invest. , weak mutation, Java ,P,N,
Lorber\cite{lorber2015model},G,test data generation,n/a,spec. (E),Y,exi.,MoMuT::UML,n/a,n/a,n/a,spec.,n/a,N,
Lou et al.\cite{lou2015mutation},G,test case prioritisation,unit,struc. (E),Y,exi.,Javalanche,well,n/a,fixed number,java,"S, M",Y,
Loyala et al.\cite{loyola2014dodona} , A ,test oracle, unit ,others,Y,exi., MAJOR ,n/a, n/a ,n/a, Java ,S,Y,
Mayer and Guderlei\cite{mayer2006random},A,"test data generation, test strategy evaluation",n/a,spec.,Y,exi.,MuJava,well,n/a,n/a,java,n/a,N,
Mayer and Schneckenburger\cite{mayer2006empirical},A,test strategy evaluation,n/a,spec.,Y,exi.,MuJava,well,n/a,n/a,java,n/a,N,
Mcminn et al.\cite{mcminn2015effectiveness},A,"test strategy evaluation, test data generation",other,struc. ,Y,exi.,SchemaAnalyst,well,reduce likelihood,n/a,SQL ,n/a,N,
Milani et al.\cite{milani2014leveraging} , A , test data generation , unit ,spec.,Y,exi., MUTANDIS \cite{mirshokraie2013efficient} ,well,reduce likelihood, n/a, JavaScript ,"S, M",Y,
Miller and Strooper\cite{miller2012case},A,test strategy evaluation,n/a,spec.,"Y, N","exi., hand.","MuJava, manual",well,manual invest.,mutant sample,java,n/a,N,
Mirshokraie\cite{mirshokraie2014effective},G,"test data generation, test oracle, test strategy evaluation",unit,struc. (E),Y,exi.,MUTANDIS,n/a,n/a,n/a,JavaScript,n/a,N,
Moon et al.\cite{moon2014ask},G,fault localisation,n/a,struc. (E),Y,exi.,Proteum,not suff.,n/a,selection strategy,C,"S, M",Y,
Mottu et al.\cite{mottu2012static},A,test data generation,n/a,struc. (E),N,n/a,,well,n/a,n/a,AspectJ,n/a,Y,
Mouchawrab et al.\cite{mouchawrab2007assessing} , A , test data generation,n/a,"spec., struc. ",Y,exi., Mujava ,n/a, manual invest. ,n/a,Java,S,Y,*
Mouchawrab et al.\cite{mouchawrab2011assessing} , A , test data generation,n/a,"spec., struc. ",Y,exi., Mujava ,n/a, manual invest. ,n/a,Java,S,Y,
Murtaza et al.\cite{murtaza2011diagnosing},G,fault localisation,n/a,struc. (E),N,exi. , \cite{andrews2003general} ,not suff.,n/a,n/a,C,M,Y,
Namin and Andrews\cite{namin2009influence} , A , test strategy evaluation , unit ,struc. ,Y,exi., Proteum ,well,  not killed as equivalent ,fixed number,C,S,Y,
Ntafos\cite{ntafos1984evaluation},A,test strategy evaluation,n/a,"struc., spec.",N,exi. ,\cite{budd1979mutation},well,n/a,n/a,Fortran,n/a,N,
Ntafos\cite{ntafos1984required},A,test strategy evaluation,n/a,struc. ,N,n/a,,n/a,n/a,n/a,Fortran,P,Y,
Offutt and Liu\cite{offutt1999generating},A,test data generation,int.,spec.,Y,exi.,Mothra,well,no invest.,n/a,n/a,n/a,N,
Papadakis and Malevris\cite{papadakis2010automatic} ,G, test data generation , unit ,struc. (E),Y,part.,jFuzz,well,"  not killed as equivalent, manual invest. ",n/a, Java ,"P, S",Y,
Papadakis and Malevris\cite{papadakis2011automatically} ,G, test data generation , unit ,struc. (E),Y,part., jFuzz ,well, manual invest. ,weak mutation, Java ,n/a,Y,
Papadakis and Malveris\cite{papadakis2012mutation} ,G, test data generation , unit ,struc. (E),N, n/a ,,well,  not killed as equivalent , weak mutation,"Delphi, C, n/a",P,N,
Papadakis et al.\cite{papadakis2012using},G,fault localisation,unit,struc. (E),Y,exi.,Proteum,n/a,no invest.,mutant sample,C,"P, S",Y,
Papadakis et al.\cite{papadakis2014sampling} , A , test-suite selection ,n/a,spec. (E),N, n/a ,,well,  not killed as equivalent , n/a, C ,S,Y,
Papadakis et al.\cite{papadakis2015metallaxis},G,fault localisation,unit,struc. (E),Y,exi.,Proteum,not suff.,no invest.,mutant sample,C,"S, M",Y,
Patrick et al.\cite{patrick2015subdomain},G,test data generation,n/a,hybrid ,Y,exi.,MuJava,n/a,n/a,n/a,java,"P, S",N,
Pinte et al.\cite{pinte2008techniques},A,test data generation,unit,struc. ,Y,exi.,MuJava,n/a,n/a,n/a,java,n/a,N,
Pretschner et al.\cite{pretschner2008model},A,"test data generation, test strategy evaluation",n/a,spec.,N,n/a,,well,n/a,n/a,spec.,n/a,N,
Qi et al.\cite{qi2013efficient},G,program repairing,n/a,struc. (E),Y,part.,TrpAutoRepair,not suff.,n/a,n/a,C,"M, L",Y,
Qu et al. \cite{qu2008configuration} ,G, test case prioritisation ,n/a,spec. (E),N,exi. , \cite{andrews2003general} ,n/a, n/a ,fixed number, C ,M,Y,
Qu et al.\cite{qu2007combinatorial} , A ," test data generation, test case prioritisation ",n/a,spec.,N,exi. , \cite{andrews2003general} ,not suff., n/a ,fixed number, C ,"S, M",Y,
Qu et al.\cite{qu2012configuration} , A , test-suite selection ,n/a,spec.,N,exi. , \cite{andrews2003general} ,n/a, n/a , n/a,C/C++,"S, M",N,
Rothermel et al.\cite{rothermel1999test},G,test case prioritisation,n/a,"struc., struc. (E)",Y,exi.,Proteum,n/a,n/a,n/a,C,S,Y,
Rothermel et al.\cite{rothermel2001prioritizing} ,G, test case prioritisation ,n/a,struc. (E),Y,exi., Proteum ,n/a,  not killed as nonequivalent , n/a, C ,S,Y,
Rubab et al.\cite{rubab2014model},A,test data generation,n/a,spec.,N,hand.,,well,n/a,n/a,spec.,n/a,N,
Rutherford et al.\cite{rutherford2008evaluating},A,test strategy evaluation,sys.,spec.,Y,exi.,MuJava,well,n/a,n/a,java,S,N,
Schuler and Zeller\cite{schuler2011assessing},A,test strategy evaluation,unit,struc. ,Y,exi.,Javalanche,n/a,n/a,n/a,java,"S, M",Y,
Schuler and Zeller\cite{schuler2013checked},A,test strategy evaluation,unit,struc. ,Y,exi.,Javalanche,n/a,n/a,n/a,java,"S, M",Y,
Segura et al.\cite{segura2010automated},A,test data generation,n/a,spec.,Y,exi.,MuClipse,well,manual invest.,n/a,java,S,Y,
Shahamiri et al.\cite{shahamiri2012artificial},A,test oracle,n/a,spec.,N,n/a,,not suff.,n/a,n/a,C\#,n/a,N,
Shelton et al.\cite{shelton2012adding},G,development scheme evaluation,unit,others,Y,exi.,MuJava,n/a,manual invest.,n/a,java,n/a,N,*
Shi et al. \cite{shi2015measuring} , A , test strategy evaluation ,n/a,sim. ,Y,Self-written, mutate.py ,not suff., manual invest. ,fixed number, C ,"S, M",Y,
Shi et al.\cite{shi2014balancing} ,G, test-suite reduction ,n/a,"struc., struc. (E)",Y,exi., PIT ,well, n/a , n/a, Java ,"P, S",Y,
Shi et al.\cite{shi2015comparing},A,test-suite reduction,unit,struc. ,Y,exi.,PIT,n/a,n/a,n/a,java,"S, M",Y,
Shrestha and Rutherford\cite{shrestha2011empirical},A,test oracle,unit,struc. ,Y,exi.,MuJava,well,manual invest.,n/a,java,"P, S",Y,
Simith and Williams\cite{smith2009guiding} ,G, test data generation , unit ,struc. (E),Y,exi., MuClipse ,well,no invest., n/a, Java ,S,Y,
Smith and Williams\cite{smith2009should},G,test strategy evaluation,unit,struc. (E),Y,exi.,"Jumble, MuClipse",well,n/a,n/a,java,S,N,*
Staats et al.\cite{staats2011better} ,A,test oracle,n/a,others,N,n/a,,n/a,model checker,fixed number,Lustre,n/a,N,
Staats et al.\cite{staats2012automated} ,G,test oracle,unit,struc. (E),N,exi. , \cite{rajan2008requirements} ,not suff.,model checker,fixed number, Lustre ,S,N,
Staats et al.\cite{staats2012oracle},A,test case prioritisation,unit,struc. ,Y,exi.,Sofya,well,n/a,fixed number,java,S,N,
Stephan and Cordy\cite{stephan2014model},A,model clone detection,n/a,others,N,n/a,,well,n/a,random mutation,simulink,n/a,N,
Tan and Edwards\cite{tan2008evaluating},A,"test data generation, test strategy evaluation",unit,struc. ,N,exi. ,sulu tool,well,n/a,n/a,sulu,n/a,N,
Tasiran et al.\cite{tasiran2012location},A,test strategy evaluation,n/a,struc. ,N,n/a,,well,n/a,n/a,java,n/a,N,
Tuya et al.\cite{tuya2010full} , A , test strategy evaluation ,other,struc. ,Y,exi., SQLMutation ,well,"reduce likelihood, manual invest.", n/a, SQL ,n/a,Y,
Vergilio et al.\cite{vergilio2006constraint},A,test strategy evaluation,n/a,struc. (E),Y,exi.,Proteum,well,manual invest.,n/a,C,n/a,N,
Vivanti et al.\cite{vivanti2013search} ,G, test data generation , unit ,"struc., struc. (E)",Y,part., EvoSuite ,n/a, n/a ,weak mutation, Java ,n/a,Y,
von Mayrhauser et al.\cite{von2000planner},G,test data generation,n/a,spec. (E),N,n/a,,well,n/a,n/a,n/a,L,N,
Wang et al.\cite{wang2010correlating},A,test strategy evaluation,n/a,sim. ,Y,exi.,MuClipse,well,  not killed as equivalent ,n/a,Java,S,N,*
Wang et al.\cite{wang2015experience} , A , test data generation ,n/a,struc. ,N,exi. , \cite{andrews2003general} ,n/a, n/a ,fixed number, C ,"S, M",Y,
Watanabe and Sakamura\cite{watanabe1996specification},A,test data generation,int.,spec.,N,n/a,,well,n/a,n/a,spec.,n/a,N,
Weyuker et al.\cite{weyuker1994automatically},A,test data generation,n/a,spec.,N,n/a,,well,n/a,n/a,n/a,n/a,N,*
Whalen et al.\cite{whalen2013observable} , A , test strategy evaluation ,n/a,struc. (E),N,exi. , \cite{rajan2008requirements} ,not suff.,model checker,fixed number, Simulink ,n/a,N,
Xie et al.\cite{xie2011testing},A,test strategy evaluation,n/a,others,Y,exi.,MuJava,well,manual invest.,fixed number,java,n/a,Y,
Xu and Ding\cite{xu2010prioritizing},A,test case prioritisation,n/a,spec.,N,n/a,,well,n/a,n/a,AspectJ,S,N,
Xu et al.\cite{xu2012testing},A,test strategy evaluation,n/a,spec.,N,hand.,,well,n/a,n/a,AspectJ,S,N,
Xuan and Monperrus\cite{xuan2014test} , A , fault localisation , unit ,others,Y,exi., PIT ,well, n/a ,fixed number, Java ,"S, M",Y,*
Yoo and Harman\cite{yoo2012test},A,test data generation,unit,struc. ,Y,exi., Mujava ,well,no invest.,n/a,Java,n/a,Y,
Yoon and Choi\cite{yoon2004effective},A,test-suite selection,int.,hybrid ,N,self.,TECC,well,n/a,selection strategy,EJB,n/a,N,
You et al.\cite{you2015efficient} , A , test data generation ,n/a,struc. (E),N,exi. ,\cite{rajan2008requirements} ,not suff.,no invest.,fixed number, Lustre ,n/a,N,
Zhan and Clark\cite{zhan2008search},G,"test data generation, test-suite reduction",n/a (code level),"struc., struc. (E)",N,self.,,not suff.,manual invest.,n/a,simulink,n/a,N,
Zhang and Mesbah\cite{zhang2015assertions} , A , test strategy evaluation , unit ,struc. (E),Y,exi., PIT ,well,  not killed as equivalent , n/a, Java ,M,Y,
Zhang et al. \cite{zhang2013bridging} , A , test case prioritisation , unit ,struc. ,Y,exi., Mujava ,n/a, n/a , n/a, Java ,"S, M",Y,
Zhang et al.\cite{wang2009taming} , A , fault localisation ,n/a,struc. (E),Y,exi., Proteum ,not suff., n/a , n/a, C ,S,Y,*
Zhang et al.\cite{zhang2009time},A,test case prioritisation,n/a,struc. ,Y,exi.,Jester,well,n/a,fixed number,java,S,Y,
Zhang et al.\cite{zhang2010test} ,G, test data generation ,n/a,struc. (E),Y,exi.," PexMutator, GenMutants ",well, manual invest. , weak mutation, C\# ,"P, S",Y,
Zhang et al.\cite{zhang2011empirical} , A , test-suite reduction , unit ,struc. ,Y,exi., MuJava ,well, n/a ,fixed number, Java ,"S, M",Y,
Zhang et al.\cite{zhang2014search},A,test oracle,n/a,spec.,Y,exi.,MuClipse,not suff.,n/a,n/a,"java, C/C++",S,Y,
Zhou and Frankl\cite{zhou2011jdama} , A ," test data generation, test strategy evaluation ",n/a,struc. ,Y,exi., JDAMA (based on SQLMutation) ,well,"reduce likelihood, manual invest.", weak mutation," Java, sql",n/a,Y,
Offutt et al.\cite{offutt1995procedures},G,test-suite reduction,unit,struc. (E),Y,exi., Mothra,well,n/a,n/a,Fortran,P,N,
